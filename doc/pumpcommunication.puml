@startuml

set namespaceSeparator ::

title EAP - PumpCommunication

namespace communication {

namespace protocol{
class CarelinkTranslation {
  - radio: unique_ptr<RadioInterface>
  + CarelinkTranslation(config: CarelinkConfiguration)
  + getFirmwareVersion(): int
  + getPumpModel(): int
  + setTempBasal(basal_rate: int): int
  + getScheduledBasalRate(): int
  + getTemporaryBasalRate(): int
  + getISF(): int
}

enum MessageTypes {
  kFirmwareVersion
}

class Command {
  - packet: Packet
}

class CarelinkConfiguration {
  + carelink_identifier: int
}

Command -> MessageTypes

}

namespace raw {

class RequestPacket {
  - data: byte[]
  - maxRetries: int
}

class ResponsePacket {
  - data: byte[]
  - maxRetries: int
  + Packet(size: int, data: byte[])
  + getData() const: byte[]
  + validate() const: int
  + maxRetries() const: int
}

class PumpConfiguration {
  + frequency: int
}

interface RadioInterface {
  + send(packet: const Packet&): int
  + receive(packet: Packet*): int
  + init(): int
  + wakeUp(): 
}

class Radio {
  + Radio(configuration: PumpConfiguration)
  - timeout: int
  - retries: int
  - readConfiguration(): void
}

namespace validation {
class CRC {
  {static} + CRC8WCDMA(data: byte[], count: unsigned int): uint8_t
  {static} - reflect(input: uint8_t): uint8_t
  {static} - crcTable : byte[]
}
}
}

communication::raw::Packet -> communication::raw::validation::CRC
communication::raw::Radio o-- communication::raw::PumpConfiguration
communication::raw::Radio -|> communication::raw::RadioInterface
communication::raw::RadioInterface o-- communication::raw::Packet
communication::protocol::CarelinkTranslation *-- communication::raw::RadioInterface

}
@enduml
